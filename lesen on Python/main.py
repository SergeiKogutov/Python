from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Command
from aiogram.utils.markdown import hide_link
from aiogram.dispatcher.filters import Text
# from aiogram.utils import ReplyKeyboardBuilder

# bot init
bot = Bot(token="5923964405:AAE7gh9q7BH5NWcuUFyeh-wVP97H4mABSWM", parse_mode="HTML")
dp = Dispatcher(bot)
mylist = [1, 2, 3]

#  echo
# @dp.message_handler()
# async def echo(message: types.Message):
#     await message.answer(message.text)

# dice
@dp.message_handler(commands=["dice"])
async def cmd_dice(message: types.Message):
    await message.answer(mylist)
    await message.answer_dice(emoji="üé≤")

#  list
# @dp.message_handler(commands=["add_to_list"])
# async def cmd_add_to_list(message: types.Message, mylist: mylist):
#     mylist.append(7)
#     await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ —á–∏—Å–ª–æ 7")


# @dp.message_handler(commands=["show_list"])
# async def cmd_show_list(message: types.Message, mylist: mylist):
#     await message.answer(f"–í–∞—à —Å–ø–∏—Å–æ–∫: {mylist}")

@dp.message_handler(commands=["test"])
async def any_message(message: types.Message):
    await message.answer("Hello, <b>world</b>!", parse_mode="HTML")
    await message.answer("Hello, *world*\!", parse_mode="MarkdownV2")
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å <u>HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π</u>")
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ <s>–∫–∞–∫–æ–π-–ª–∏–±–æ —Ä–∞–∑–º–µ—Ç–∫–∏</s>", parse_mode=None)

@dp.message_handler(commands=["name"])
async def cmd_name(message: types.Message, command: Command):
    if command.args:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{command.args}</b>")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ—ë –∏–º—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /name!")

@dp.message_handler(commands=["hidden_link"])
async def cmd_hidden_link(message: types.Message):
    await message.answer(
        f"{hide_link('https://telegra.ph/file/562a512448876923e28c3.png')}"
        f"–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Telegram: *—Å—É—â–µ—Å—Ç–≤—É–µ—Ç*\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: *–Ω–µ —á–∏—Ç–∞—é—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é*\n"
        f"–ì—Ä—É—à–∞:"
    )

@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    kb = [
        [
            types.KeyboardButton(text="–° –ø—é—Ä–µ—à–∫–æ–π"),
            types.KeyboardButton(text="–ë–µ–∑ –ø—é—Ä–µ—à–∫–∏"),
            types.KeyboardButton(text="–° –º–∞–∫–∞—Ä–æ—à–∫–∞–º–∏")
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥–∞—á–∏"
    )
    await message.answer("–ö–∞–∫ –ø–æ–¥–∞–≤–∞—Ç—å –∫–æ—Ç–ª–µ—Ç—ã?", reply_markup=keyboard)

@dp.message_handler(Text(equals="–° –ø—é—Ä–µ—à–∫–æ–π"))
async def with_puree(message: types.Message):
    await message.reply("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!")

@dp.message_handler(Text(equals="–ë–µ–∑ –ø—é—Ä–µ—à–∫–∏"))
async def without_puree(message: types.Message):
    await message.reply("–¢–∞–∫ –Ω–µ–≤–∫—É—Å–Ω–æ!")

@dp.message_handler(Text(equals="–° –º–∞–∫–∞—Ä–æ—à–∫–∞–º–∏"))
async def without_puree(message: types.Message):
    await message.reply("–î–∞ —Ç—ã –∫—Ä—É—Ç!")

# @dp.message_handler(commands="reply_builder")
# async def reply_builder(message: types.Message):
#     builder = ReplyKeyboardBuilder()
#     for i in range(1, 17):
#         builder.add(types.KeyboardButton(text=str(i)))
#     builder.adjust(4)
#     await message.answer(
#         "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ:",
#         reply_markup=builder.as_markup(resize_keyboard=True),
#     )

# run long-polling
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)